{"version":3,"sources":["App.tsx","serviceWorker.js","Line.tsx","DataSeries.tsx","LineChart.tsx","Graph.tsx","ContactCard.tsx","index.tsx"],"names":["App","state","data","cases","deaths","recovered","fetch","method","then","response","json","setState","this","GetWorldStatistics","className","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Line","props","path","stroke","fill","strokeWidth","d","defaultProps","DataSeries","xScale","yScale","line","d3Shape","x","y","curve","points","colors","d3Scale","d3Scheme","LineChart","width","height","domain","minDate","maxDate","range","xAxis","d3Axis","ticks","d3Time","every","d3Selection","title","append","attr","call","yMin","yMax","yAxis","data-title","textAnchor","fontSize","Graph","covidData","headers","Accept","graphSettings","d3","datum","death","getDate","date","graphData","cumulativeData","derive","forEach","graph","Object","assign","render","numberDate","Date","year","Math","floor","month","derivationNumber","Error","i","length","pop","map","pointsHasData","isDataLoaded","ContactCard","href","target","rel","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1702223b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\ninterface GlobalData {\n    cases: number;\n    deaths: number;\n    recovered: number;\n}\n\ninterface GlobalState {\n    data: GlobalData;\n}\n\nclass App extends React.Component {\n    state: GlobalState = {\n        data: {\n            cases: 0,\n            deaths: 0,\n            recovered: 0,\n        },\n    };\n\n    GetWorldStatistics() {\n        fetch(\"https://coronavirus-19-api.herokuapp.com/all\", { method: \"GET\" })\n            .then((response) => {\n                return response.json();\n            })\n            .then((json: GlobalData) => {\n                this.setState({ data: json });\n            });\n    }\n\n    componentDidMount() {\n        this.GetWorldStatistics();\n    }\n\n    render() {\n        if (this.state.data.cases === 0) {\n            return <div className=\"App\">Loading Global Data...</div>;\n        } else {\n            return (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <div>Global COVID 19 stats:</div>\n                        <div>cases: {this.state.data.cases}</div>\n                        <div>deaths: {this.state.data.deaths}</div>\n                        <div>recovered: {this.state.data.recovered}</div>\n                    </header>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\ninterface Props {\r\n    path: string | null;\r\n    stroke: string;\r\n    fill: string;\r\n    strokeWidth: number;\r\n}\r\n\r\nclass Line extends Component<Props> {\r\n    static defaultProps = { stroke: \"white\", fill: \"none\", strokeWidth: 3 };\r\n\r\n    render() {\r\n        let { path, stroke, fill, strokeWidth } = this.props;\r\n        if (path) {\r\n            return (\r\n                <path\r\n                    d={path}\r\n                    stroke={stroke}\r\n                    fill={fill}\r\n                    strokeWidth={strokeWidth}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Line;\r\n","import React, { Component } from \"react\";\r\nimport * as d3Scale from \"d3-scale\";\r\nimport * as d3Scheme from \"d3-scale-chromatic\";\r\nimport * as d3Shape from \"d3-shape\";\r\nimport Line from \"./Line\";\r\nimport { CovidData, Points } from \"./Graph\";\r\n\r\ninterface Props {\r\n    data: CovidData;\r\n    xScale: d3Scale.ScaleTime<number, number>;\r\n    yScale: d3Scale.ScaleLinear<number, number>;\r\n}\r\n\r\nclass DataSeries extends Component<Props> {\r\n    static defaultProps = {\r\n        data: [],\r\n        colors: d3Scale.scaleOrdinal(d3Scheme.schemeCategory10),\r\n    };\r\n\r\n    render() {\r\n        let { data, xScale, yScale } = this.props;\r\n\r\n        let line = d3Shape\r\n            .line<Points>()\r\n            .x((d) => {\r\n                return xScale(d.x);\r\n            })\r\n            .y((d) => {\r\n                return yScale(d.y);\r\n            })\r\n            .curve(d3Shape.curveCardinal);\r\n\r\n        return <Line path={line(data.points)} />;\r\n    }\r\n}\r\n\r\nexport default DataSeries;\r\n","import React, { Component } from \"react\";\r\nimport DataSeries from \"./DataSeries\";\r\nimport * as d3Axis from \"d3-axis\";\r\nimport * as d3Time from \"d3-time\";\r\nimport * as d3Selection from \"d3-selection\";\r\nimport * as d3Scale from \"d3-scale\";\r\nimport { CovidData } from \"./Graph\";\r\n\r\ninterface Props {\r\n    data: CovidData;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nclass LineChart extends Component<Props> {\r\n    static defaultProps = {\r\n        width: 600,\r\n        height: 300,\r\n    };\r\n\r\n    componentDidMount() {\r\n        let { width, height, data } = this.props;\r\n\r\n        let xScale = d3Scale\r\n            .scaleTime()\r\n            .domain([data.minDate, data.maxDate])\r\n            .range([0, width]);\r\n\r\n        let xAxis = d3Axis.axisBottom(xScale);\r\n        xAxis.ticks(d3Time.timeMonth.every(1));\r\n        d3Selection\r\n            .select(`[data-title=\"${data.title}\"]`)\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(40,${height})`)\r\n            .call(xAxis);\r\n        let yScale = d3Scale\r\n            .scaleLinear()\r\n            .domain([data.yMin, data.yMax])\r\n            .range([height, 30]);\r\n\r\n        let yAxis = d3Axis.axisLeft(yScale);\r\n        yAxis.ticks(5);\r\n        d3Selection\r\n            .select(`[data-title=\"${data.title}\"]`)\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(40,0)`)\r\n            .call(yAxis);\r\n        d3Selection\r\n            .select(`[data-title=\"${data.title}\"]`)\r\n            .attr(\"viewBox\", \"0 0 630 330\");\r\n    }\r\n\r\n    render() {\r\n        let { width, height, data } = this.props;\r\n\r\n        let xScale = d3Scale\r\n            .scaleTime()\r\n            .domain([data.minDate, data.maxDate])\r\n            .range([40, width]);\r\n        xScale.ticks(5);\r\n\r\n        let yScale = d3Scale\r\n            .scaleLinear()\r\n            .domain([data.yMin, data.yMax])\r\n            .range([height, 30]);\r\n        return (\r\n            <svg width={\"80vw\"} height={\"60vh\"} data-title={data.title}>\r\n                <g>\r\n                    <text\r\n                        x={(width + 30) / 2}\r\n                        y={15}\r\n                        textAnchor=\"middle\"\r\n                        fontSize=\"16px\"\r\n                        fill=\"white\"\r\n                    >\r\n                        {data.title}\r\n                    </text>\r\n                    <DataSeries xScale={xScale} yScale={yScale} data={data} />\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineChart;\r\n","import React, { Component } from \"react\";\r\nimport \"../node_modules/react-vis/dist/style.css\";\r\nimport * as d3 from \"d3-array\";\r\nimport \"./Graph.css\";\r\nimport LineChart from \"./LineChart\";\r\n\r\ninterface ApiData {\r\n    date: number;\r\n    state?: string;\r\n    positive: number;\r\n    negative: number;\r\n    death: number;\r\n}\r\n\r\nexport interface Points {\r\n    x: Date;\r\n    y: number;\r\n}\r\n\r\nexport interface CovidData {\r\n    points: Points[];\r\n    yMax: any;\r\n    yMin: any;\r\n    minDate: Date;\r\n    maxDate: Date;\r\n    title: string;\r\n}\r\n\r\ninterface CovidState {\r\n    covidData: CovidData[];\r\n}\r\n\r\nclass Graph extends Component {\r\n    state: CovidState = { covidData: [] };\r\n\r\n    componentDidMount() {\r\n        this.GetWorldStatistics();\r\n    }\r\n\r\n    GetWorldStatistics() {\r\n        fetch(\"https://covidtracking.com/api/v1/us/daily.json\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\",\r\n            },\r\n        })\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((json: ApiData[]) => {\r\n                let graphSettings = {\r\n                    yMin: d3.min(json, function (datum: ApiData) {\r\n                        return datum.death;\r\n                    }),\r\n                    minDate: this.getDate(\r\n                        d3.min(json, function (datum) {\r\n                            return datum.date;\r\n                        })\r\n                    ),\r\n                    maxDate: this.getDate(\r\n                        d3.max(json, function (datum) {\r\n                            return datum.date;\r\n                        })\r\n                    ),\r\n                };\r\n                let graphData = [\r\n                    {\r\n                        points: this.cumulativeData(json),\r\n                        yMax: d3.max(json, function (datum) {\r\n                            return datum.death;\r\n                        }),\r\n                        yMin: null,\r\n                        minDate: null,\r\n                        maxDate: null,\r\n                        title: \"US total deaths\",\r\n                    },\r\n                    {\r\n                        points: this.cumulativeData(this.derive(json, 1)),\r\n                        yMax: d3.max(json, function (datum) {\r\n                            return datum.death;\r\n                        }),\r\n                        yMin: null,\r\n                        minDate: null,\r\n                        maxDate: null,\r\n                        title: \"US deaths/day\",\r\n                    },\r\n                ];\r\n\r\n                graphData.forEach((graph) => {\r\n                    Object.assign(graph, graphSettings);\r\n                });\r\n                this.setState({ covidData: graphData });\r\n                this.render();\r\n            });\r\n    }\r\n\r\n    // convert yyyymmdd integer to Date object\r\n    getDate(numberDate?: number) {\r\n        if (!numberDate) {\r\n            return new Date();\r\n        }\r\n        const year = Math.floor(numberDate / 10000);\r\n        const month = Math.floor(numberDate / 100) - 1 - year * 100;\r\n        const day = numberDate - year * 10000 - (month + 1) * 100;\r\n        const date = new Date(year, month, day);\r\n        return date;\r\n    }\r\n\r\n    // get derivations of the discreet data\r\n    derive(data: ApiData[], derivationNumber: number): ApiData[] {\r\n        if (derivationNumber < 0) {\r\n            throw new Error();\r\n        }\r\n\r\n        if (derivationNumber === 0) {\r\n            return data;\r\n        }\r\n\r\n        for (let i = 0; i < data.length - 1; i++) {\r\n            data[i].death = data[i].death - data[i + 1].death;\r\n        }\r\n\r\n        data.pop();\r\n        return this.derive(data, --derivationNumber);\r\n    }\r\n\r\n    // get graphable array\r\n    cumulativeData(data: ApiData[]) {\r\n        let pointsData: Points[] = data.map((datum) => {\r\n            return {\r\n                x: this.getDate(datum.date),\r\n                y: datum.death ? datum.death : 0,\r\n            };\r\n        });\r\n        return pointsData;\r\n    }\r\n\r\n    isDataLoaded() {\r\n        let pointsExists = !!this.state?.covidData[0];\r\n        let pointsHasData = false;\r\n        if (pointsExists) {\r\n            pointsHasData =\r\n                !!this.state.covidData[0].points &&\r\n                this.state.covidData[0].points.length > 0;\r\n        }\r\n        return pointsHasData;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Graph\">\r\n                {this.isDataLoaded() ? (\r\n                    <div>\r\n                        <LineChart\r\n                            data={this.state.covidData[0]}\r\n                            width={600}\r\n                            height={300}\r\n                        />\r\n                        <LineChart\r\n                            data={this.state.covidData[1]}\r\n                            width={600}\r\n                            height={300}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <div>loading...</div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Graph;\r\n","import React from \"react\";\r\nimport \"./ContactCard.css\";\r\n\r\nclass ContactCard extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"ContactCard\">\r\n                <div>David Alvarez Contact</div>{\" \"}\r\n                <div>\r\n                    Email:{\" \"}\r\n                    <a href=\"mailto:d.alvar.work@gmail.com\">\r\n                        d.alvar.work@gmail.com\r\n                    </a>\r\n                </div>\r\n                <div>\r\n                    Phone: <a href=\"tel:+12068905009\">206-890-5009</a>\r\n                </div>\r\n                <div>\r\n                    LinkedIn:{\" \"}\r\n                    <a\r\n                        href=\"https://linkedin.com/in/david-g-alvarez\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        david-g-alvarez\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactCard;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Graph from \"./Graph\";\nimport ContactCard from \"./ContactCard\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n        <Graph />\n        <ContactCard />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}